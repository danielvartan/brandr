% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scale_brand.R
\name{scale_brand}
\alias{scale_brand}
\alias{scale_color_brand_d}
\alias{scale_color_brand_c}
\alias{scale_color_brand_b}
\alias{scale_colour_brand_d}
\alias{scale_colour_brand_c}
\alias{scale_colour_brand_b}
\alias{scale_fill_brand_d}
\alias{scale_fill_brand_c}
\alias{scale_fill_brand_b}
\title{Brand color scales for \code{ggplot2}}
\usage{
scale_brand(
  aesthetics = "color",
  scale_type = "c",
  color_type = "seq",
  direction = 1,
  na.value = NA,
  reverse = FALSE,
  ...
)

scale_color_brand_d(
  aesthetics = "color",
  scale_type = "d",
  color_type = "qual",
  direction = 1,
  ...
)

scale_color_brand_c(
  aesthetics = "color",
  scale_type = "c",
  color_type = "seq",
  direction = 1,
  ...
)

scale_color_brand_b(
  aesthetics = "color",
  scale_type = "b",
  color_type = "seq",
  direction = 1,
  ...
)

scale_colour_brand_d(
  aesthetics = "color",
  scale_type = "d",
  color_type = "qual",
  direction = 1,
  ...
)

scale_colour_brand_c(
  aesthetics = "color",
  scale_type = "c",
  color_type = "seq",
  direction = 1,
  ...
)

scale_colour_brand_b(
  aesthetics = "color",
  scale_type = "b",
  color_type = "seq",
  direction = 1,
  ...
)

scale_fill_brand_d(
  aesthetics = "fill",
  scale_type = "d",
  color_type = "qual",
  direction = 1,
  ...
)

scale_fill_brand_c(
  aesthetics = "fill",
  scale_type = "c",
  color_type = "seq",
  direction = 1,
  ...
)

scale_fill_brand_b(
  aesthetics = "fill",
  scale_type = "b",
  color_type = "seq",
  direction = 1,
  ...
)
}
\arguments{
\item{aesthetics}{(Optional) A \code{\link[base:character]{character}} string
indicating the name of the aesthetic of the scale (e.g., \verb{"color"``, }"fill"`).}

\item{scale_type}{(Optional) A \code{\link[base:character]{character}} string
indicating the type of scale: \code{"d"}/\code{"discrete"}, \code{"c"}/\code{"continuous"},
or \code{"b"}/\code{"binned"}.}

\item{color_type}{(Optional) A \code{\link[base:character]{character}} string
indicating the type of color scale: \code{"seq"}/\verb{"sequential"``, }"div"\code{/}"diverging"``, or \code{"qual"}/`"qualitative"` (Default: `c `).}

\item{direction}{(Optional) Sets the order of colors in the scale. If \code{1}
colors are as output by the palette function. If \code{-1}, the order of
colors is reversed (Default: \code{1}).}

\item{na.value}{(Optional) A \code{\link[base:character]{character}} string
indicating the color to use for missing values. It must contain a
hexadecimal color code or one of the values in
\code{\link[grDevices:colors]{colors()}} (Default: \code{NA}).}

\item{reverse}{A \code{\link[base:logical]{logical}} indicating whether the
legend or color bar should be reversed (Default: \code{FALSE}).}

\item{...}{Additional arguments passed to the \code{ggplot2} scale function:
\code{\link[ggplot2:discrete_scale]{discrete_scale()}},
\code{\link[ggplot2:continuous_scale]{continuous_scale()}}, or
\code{\link[ggplot2:binned_scale]{binned_scale()}}.}
}
\value{
A \code{\link[ggplot2:continuous_scale]{ggplot2}} scale object.
}
\description{
\verb{scale_*_brand_*()} functions provide color scales for
\href{https://ggplot2.tidyverse.org/}{ggplot2} based on brand colors defined
in the \verb{_brand.yml} file. These functions create discrete, continuous, or
binned scales with sequential, diverging, or qualitative color palettes
that match your brand identity.
}
\details{
\subsection{Path to \verb{_brand.yml}}{

\code{brandr} will always look for a \verb{_brand.yml} file in the root directory of
your project. If the file is not found, an error message will be displayed.
You can also set the path to the file manually using the
\code{\link[base:options]{options()}} function:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{options(BRANDR_BRAND_YML = [PATH TO _brand.yml])
}\if{html}{\out{</div>}}
}

\subsection{Brand Color Scales}{

To control the colors for each brand color scale, assign the desired
hexadecimal color codes in a \code{\link[base:character]{character}} vector to the
following options:
\itemize{
\item \code{BRANDR_COLOR_SEQUENTIAL}: For sequential color scales
\item \code{BRANDR_COLOR_DIVERGING}:  For diverging color scales
\item \code{BRANDR_COLOR_QUALITATIVE}: For qualitative color scales
}

You can use \code{\link[=get_brand_color]{get_brand_color()}} to get the hexadecimal
color codes from the \verb{_brand.yml} file.

Example:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{options(
  BRANDR_COLOR_SEQUENTIAL =
    get_brand_color(c("primary", "secondary")),
  BRANDR_COLOR_DIVERGING =
    get_brand_color(c("primary", "white", "secondary")),
  BRANDR_COLOR_QUALITATIVE =
    get_brand_color(c("primary", "secondary", "tertiary"))
)
}\if{html}{\out{</div>}}
}
}
\examples{
library(ggplot2)

iris |>
  ggplot(
    aes(
      x = Sepal.Length,
      y = Sepal.Width,
      shape = Species,
      color = Species
    )
  ) +
  geom_point(size = 5) +
  scale_color_brand_d() +
  theme_bw()

faithfuld |>
  ggplot(aes(waiting, eruptions, fill = density)) +
  geom_raster() +
  scale_x_continuous(NULL, expand = c(0, 0)) +
  scale_y_continuous(NULL, expand = c(0, 0)) +
  scale_fill_brand_b() +
  labs(fill = "Density") +
  theme_bw()

mtcars |>
  ggplot(aes(mpg, wt, fill = factor(cyl))) +
  geom_boxplot() +
  scale_fill_brand_d() +
  labs(fill = "cyl") +
  theme_bw()

data.frame(x = runif(10000), y = runif(10000)) |>
  ggplot(aes(x, y)) +
  geom_hex() +
  coord_fixed() +
  scale_fill_brand_c() +
  labs(fill = "") +
  theme_bw()
}
\concept{ggplot2 functions.}
