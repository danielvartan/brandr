% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scale_brand.R
\name{scale_brand}
\alias{scale_brand}
\alias{scale_color_brand_d}
\alias{scale_color_brand_c}
\alias{scale_color_brand_b}
\alias{scale_colour_brand_d}
\alias{scale_colour_brand_c}
\alias{scale_colour_brand_b}
\alias{scale_fill_brand_d}
\alias{scale_fill_brand_c}
\alias{scale_fill_brand_b}
\title{Brand color scales for `ggplot2``}
\usage{
scale_brand(
  aesthetics = "color",
  scale_type = "c",
  color_type = "seq",
  direction = 1,
  na.value = NA,
  reverse = FALSE,
  brand_yml = here::here("_brand.yml"),
  ...
)

scale_color_brand_d(
  aesthetics = "color",
  scale_type = "d",
  color_type = "seq",
  direction = 1,
  ...
)

scale_color_brand_c(
  aesthetics = "color",
  scale_type = "c",
  color_type = "seq",
  direction = 1,
  ...
)

scale_color_brand_b(
  aesthetics = "color",
  scale_type = "b",
  color_type = "seq",
  direction = 1,
  ...
)

scale_colour_brand_d(
  aesthetics = "color",
  scale_type = "d",
  color_type = "seq",
  direction = 1,
  ...
)

scale_colour_brand_c(
  aesthetics = "color",
  scale_type = "c",
  color_type = "seq",
  direction = 1,
  ...
)

scale_colour_brand_b(
  aesthetics = "color",
  scale_type = "b",
  color_type = "seq",
  direction = 1,
  ...
)

scale_fill_brand_d(
  aesthetics = "fill",
  scale_type = "d",
  color_type = "seq",
  direction = 1,
  ...
)

scale_fill_brand_c(
  aesthetics = "fill",
  scale_type = "c",
  color_type = "seq",
  direction = 1,
  ...
)

scale_fill_brand_b(
  aesthetics = "fill",
  scale_type = "b",
  color_type = "seq",
  direction = 1,
  ...
)
}
\arguments{
\item{aesthetics}{(Optional) A \code{\link[base:character]{character}} string
indicating the name of the aesthetic of the scale (e.g., \verb{"color"``, }"fill"`).}

\item{scale_type}{(Optional) A \code{\link[base:character]{character}} string
indicating the type of scale: \code{"d"}/\code{"discrete"}, \code{"c"}/\code{"continuous"},
or \code{"b"}/\code{"binned"}.}

\item{color_type}{(Optional) A \code{\link[base:character]{character}} string
indicating the type of color scale: \code{"seq"}/\verb{"sequential"``, }"div"\code{/}"diverging"``, or \code{"qual"}/`"qualitative"` (Default: `c `).}

\item{direction}{(Optional) Sets the order of colors in the scale. If \code{1}
colors are as output by the palette function. If \code{-1}, the order of
colors is reversed (Default: \code{1}).}

\item{na.value}{(Optional) A \code{\link[base:character]{character}} string
indicating the color to use for missing values. It must contain a
hexadecimal color code or one of the values in
\code{\link[grDevices:colors]{colors()}} (Default: \code{NA}).}

\item{reverse}{A \code{\link[base:logical]{logical}} indicating whether the
legend or color bar should be reversed (Default: \code{FALSE}).}

\item{brand_yml}{(Optional) A \code{\link[base:character]{character}} string
indicating the path to the \verb{_brand.yml} file. If not provided, the
function will look for a \verb{_brand.yml} file in the current working
directory.}

\item{...}{Additional arguments passed to the \code{ggplot2} scale function:
\code{\link[ggplot2:discrete_scale]{discrete_scale()}},
\code{\link[ggplot2:continuous_scale]{continuous_scale()}}, or
\code{\link[ggplot2:binned_scale]{binned_scale()}}.}
}
\value{
A \code{\link[ggplot2:continuous_scale]{ggplot2}} scale object.
}
\description{
\verb{scale_*_brand_*()} functions provide color scales for
\link[=?ggplot2]{ggplot2} based on brand colors defined in the \verb{_brand.yml}
file. These functions create discrete, continuous, or binned scales with
sequential, diverging, or qualitative color palettes that match your
brand identity.
}
\details{
To control the colors for each brand color scale, assign the desired
hexadecimal color codes in a \code{\link[base:character]{character}} vector to the
following options:
\itemize{
\item \code{BRANDR_COLOR_SEQUENTIAL} for sequential color scales
\item \code{BRANDR_COLOR_DIVERGING} for diverging color scales
\item \code{BRANDR_COLOR_QUALITATIVE} for qualitative color scales
}

Use \code{\link[=get_brand_color]{get_brand_color()}} to get the hexadecimal
color codes from the \verb{_brand.yml} file.

Example:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{options(
  BRANDR_COLOR_SEQUENTIAL =
    get_brand_color(c("primary", "secondary")),
  BRANDR_COLOR_DIVERGING =
    get_brand_color(c("primary", "white", "secondary")),
  BRANDR_COLOR_QUALITATIVE =
    get_brand_color(c("primary", "secondary", "tertiary"))
)
}\if{html}{\out{</div>}}
}
\examples{
if (base::interactive()) {
  library(ggplot2)

  ggplot(mtcars, aes(mpg, wt, color = cyl)) +
    geom_bar() +
    scale_color_brand_c() +
    theme_bw()

  ggplot(mtcars, aes(mpg, wt, fill = factor(cyl))) +
    geom_boxplot() +
    scale_fill_brand_d(color_type = "qual") +
    theme_bw()
}
}
\concept{ggplot2 functions.}
